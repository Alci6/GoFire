import './SortableList.svelte.css';
/* src/lib/atoms/SortableList.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	add_render_callback,
	add_transform,
	append,
	attr,
	check_outros,
	create_animation,
	create_in_transition,
	create_out_transition,
	create_slot,
	detach,
	element,
	empty,
	fix_and_outro_and_destroy_block,
	fix_position,
	group_outros,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out,
	update_keyed_each,
	update_slot
} from "../../../_snowpack/pkg/svelte/internal.js";

import { quintOut } from "../../../_snowpack/pkg/svelte/easing.js";
import { crossfade } from "../../../_snowpack/pkg/svelte/transition.js";
import { flip } from "../../../_snowpack/pkg/svelte/animate.js";
import { createEventDispatcher } from "../../../_snowpack/pkg/svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	child_ctx[17] = i;
	return child_ctx;
}

const get_default_slot_changes = dirty => ({
	item: dirty & /*list*/ 1,
	index: dirty & /*list*/ 1
});

const get_default_slot_context = ctx => ({
	item: /*item*/ ctx[15],
	index: /*index*/ ctx[17]
});

// (61:0) {#if list && list.length}
function create_if_block(ctx) {
	let ul;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let each_value = /*list*/ ctx[0];
	const get_key = ctx => /*getKey*/ ctx[8](/*item*/ ctx[15]);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(ul, "class", "svelte-1t1aq3b");
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*list, JSON, getKey, isOver, start, over, leave, drop, $$scope*/ 1523) {
				each_value = /*list*/ ctx[0];
				group_outros();
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, ul, fix_and_outro_and_destroy_block, create_each_block, null, get_each_context);
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

// (77:25)       
function fallback_block(ctx) {
	let p;
	let t_value = /*getKey*/ ctx[8](/*item*/ ctx[15]) + "";
	let t;

	return {
		c() {
			p = element("p");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty & /*list*/ 1 && t_value !== (t_value = /*getKey*/ ctx[8](/*item*/ ctx[15]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (63:2) {#each list as item, index (getKey(item))}
function create_each_block(key_2, ctx) {
	let li;
	let t;
	let li_data_index_value;
	let li_data_id_value;
	let li_intro;
	let li_outro;
	let rect;
	let stop_animation = noop;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], get_default_slot_context);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	return {
		key: key_2,
		first: null,
		c() {
			li = element("li");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t = space();
			attr(li, "data-index", li_data_index_value = /*index*/ ctx[17]);
			attr(li, "data-id", li_data_id_value = JSON.stringify(/*getKey*/ ctx[8](/*item*/ ctx[15])));
			attr(li, "draggable", "true");
			attr(li, "class", "svelte-1t1aq3b");
			toggle_class(li, "over", /*getKey*/ ctx[8](/*item*/ ctx[15]) === /*isOver*/ ctx[1]);
			this.first = li;
		},
		m(target, anchor) {
			insert(target, li, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(li, null);
			}

			append(li, t);
			current = true;

			if (!mounted) {
				dispose = [
					listen(li, "dragstart", /*start*/ ctx[4]),
					listen(li, "dragover", /*over*/ ctx[5]),
					listen(li, "dragleave", /*leave*/ ctx[6]),
					listen(li, "drop", /*drop*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, list*/ 1025)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, get_default_slot_changes, get_default_slot_context);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*list*/ 1) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty & /*list*/ 1 && li_data_index_value !== (li_data_index_value = /*index*/ ctx[17])) {
				attr(li, "data-index", li_data_index_value);
			}

			if (!current || dirty & /*list*/ 1 && li_data_id_value !== (li_data_id_value = JSON.stringify(/*getKey*/ ctx[8](/*item*/ ctx[15])))) {
				attr(li, "data-id", li_data_id_value);
			}

			if (dirty & /*getKey, list, isOver*/ 259) {
				toggle_class(li, "over", /*getKey*/ ctx[8](/*item*/ ctx[15]) === /*isOver*/ ctx[1]);
			}
		},
		r() {
			rect = li.getBoundingClientRect();
		},
		f() {
			fix_position(li);
			stop_animation();
			add_transform(li, rect);
		},
		a() {
			stop_animation();
			stop_animation = create_animation(li, rect, flip, { duration: 300 });
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);

			add_render_callback(() => {
				if (li_outro) li_outro.end(1);
				if (!li_intro) li_intro = create_in_transition(li, /*receive*/ ctx[3], { key: /*getKey*/ ctx[8](/*item*/ ctx[15]) });
				li_intro.start();
			});

			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			if (li_intro) li_intro.invalidate();
			li_outro = create_out_transition(li, /*send*/ ctx[2], { key: /*getKey*/ ctx[8](/*item*/ ctx[15]) });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			if (detaching && li_outro) li_outro.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*list*/ ctx[0] && /*list*/ ctx[0].length && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*list*/ ctx[0] && /*list*/ ctx[0].length) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*list*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	const [send, receive] = crossfade({
		duration: d => Math.sqrt(d * 200),
		fallback(node, params) {
			const style = getComputedStyle(node);
			const transform = style.transform === "none" ? "" : style.transform;

			return {
				duration: 600,
				easing: quintOut,
				css: t => `
					transform: ${transform} scale(${t});
					opacity: ${t}
				`
			};
		}
	});

	// DRAG AND DROP
	let isOver = false;

	const getDraggedParent = node => node.dataset && node.dataset.index
	? node.dataset
	: getDraggedParent(node.parentNode);

	const start = ev => {
		ev.dataTransfer.setData("source", ev.target.dataset.index);
	};

	const over = ev => {
		ev.preventDefault();
		let dragged = getDraggedParent(ev.target);
		if (isOver !== dragged.id) $$invalidate(1, isOver = JSON.parse(dragged.id));
	};

	const leave = ev => {
		let dragged = getDraggedParent(ev.target);
		if (isOver === dragged.id) $$invalidate(1, isOver = false);
	};

	const drop = ev => {
		$$invalidate(1, isOver = false);
		ev.preventDefault();
		let dragged = getDraggedParent(ev.target);
		let from = ev.dataTransfer.getData("source");
		let to = dragged.index;
		reorder({ from, to });
	};

	const dispatch = createEventDispatcher();

	const reorder = ({ from, to }) => {
		let newList = [...list];
		newList[from] = [newList[to], newList[to] = newList[from]][0];
		dispatch("sort", newList);
	};

	// UTILS
	const getKey = item => key ? item[key] : item;

	let { list } = $$props;
	let { key } = $$props;

	$$self.$$set = $$props => {
		if ("list" in $$props) $$invalidate(0, list = $$props.list);
		if ("key" in $$props) $$invalidate(9, key = $$props.key);
		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
	};

	return [
		list,
		isOver,
		send,
		receive,
		start,
		over,
		leave,
		drop,
		getKey,
		key,
		$$scope,
		slots
	];
}

class SortableList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { list: 0, key: 9 });
	}
}

export default SortableList;